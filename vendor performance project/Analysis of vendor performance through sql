create database vendor_performance;
use vendor_performance;

#1.
select * from vendor_performance.begin_inventory;
select * from vendor_performance.end_inventory;
select * from vendor_performance.purchases;
select * from vendor_performance.purchase_prices;
select * from vendor_performance.sales;
select * from vendor_performance.vendor_invoice;

#2.List all the products from the begin_inventory where onhand < 10
SELECT * FROM vendor_performance.begin_inventory
WHERE onhand < 10;

#3List all sales happend in Jan2024
select * from vendor_performance.sales
where month(SalesDate) = 1 and year(SalesDate) = 2024;

#4. Display all the unique product size available in inventory
select distinct(size) from vendor_performance.begin_inventory;

#5.List all the vendors whose PONnumber is 8171
select * from vendor_performance.vendor_invoice
where PONumber = 8171;

#6.Find the total number of purchase orders issued by each vendor
SELECT VendorName, COUNT(DISTINCT PONumber) AS TotalPOs
FROM vendor_performance.vendor_invoice
GROUP BY VendorName;

#7. sort products in end_inventory by decreasing onhand quantity
select * from vendor_performance.end_inventory order by onhand desc;

#8. List  stores with highest sales dollars 
select store, sum(salesdollars) as totalsales
from vendor_performance.sales
group by store 
order by totalsales desc;

#9. Find vendors who supplied more than 100000 worth of products 
SELECT VendorName, SUM(Dollars) AS TotalSupplied
FROM vendor_performance.vendor_invoice
GROUP BY VendorName
HAVING SUM(Dollars) > 100000;

#10.List products where ending stock is less than beginning stock.
SELECT b.InventoryId, b.onHand AS BeginQty, e.onHand AS EndQty
FROM vendor_performance.begin_inventory b
JOIN vendor_performance.end_inventory e
  ON b.InventoryId = e.InventoryId AND b.Store = e.Store
WHERE e.onHand < b.onHand;

#11. Join sales and purchase_prices to calculate profit per unit.
SELECT s.InventoryId, s.Description, s.SalesPrice, p.PurchasePrice,
       (s.SalesPrice - p.PurchasePrice) AS ProfitPerUnit
FROM vendor_performance.sales s
JOIN vendor_performance.purchase_prices p
  ON s.Brand = p.Brand AND s.Description = p.Description AND s.Size = p.Size;
  
#12. List the top 30 brands by total quantity sold.
SELECT Brand, SUM(SalesQuantity) AS TotalSold
FROM vendor_performance.sales
GROUP BY Brand
ORDER BY TotalSold DESC
LIMIT 30;

#13. Find total purchase quantity and dollars per classification.
SELECT Classification, SUM(Quantity) AS TotalQty, cast(SUM(Dollars) as decimal(10,2)) AS TotalAmount
FROM vendor_performance.purchases
GROUP BY Classification;

#14.Show all sales records where excise tax is greater than 1%.
SELECT * FROM vendor_performance.sales
WHERE ExciseTax > 1;

#15. Find average sales price per store for each product size.
SELECT Store, Size, AVG(SalesPrice) AS AvgPrice
FROM vendor_performance.sales
GROUP BY Store, Size;

#16.List products sold but never purchased.
SELECT DISTINCT s.InventoryId, s.Description
FROM vendor_performance.sales s
LEFT JOIN vendor_performance.purchases p
  ON s.InventoryId = p.InventoryId
WHERE p.InventoryId IS NULL;

#17.Identify the vendor with the highest total freight charges. 
SELECT VendorName, cast(SUM(Freight) as decimal(10,2)) AS TotalFreight
FROM vendor_performance.vendor_invoice
GROUP BY VendorName
ORDER BY TotalFreight DESC
LIMIT 100;

#18.Rank brands by total quantity sold using window function.
SELECT Brand, SUM(SalesQuantity) AS TotalSold,
       RANK() OVER (ORDER BY SUM(SalesQuantity) DESC) AS SalesRank
FROM vendor_performance.sales
GROUP BY Brand;

#19.Find average days between PODate and PayDate per vendor.
SELECT VendorName,
       AVG(DATEDIFF(PayDate, PODate)) AS AvgProcessingDays
FROM vendor_performance.vendor_invoice
WHERE PayDate IS NOT NULL
GROUP BY VendorName;

#20.. Find the total number of units and total sales for each product (InventoryId) sold by each store.
SELECT InventoryId, Store, SUM(SalesQuantity) AS TotalUnitsSold, SUM(SalesDollars) AS TotalSales
FROM vendor_performance.sales
GROUP BY InventoryId, Store;

#21. List all products that were purchased but never added to the begin_inventory table.
SELECT DISTINCT p.InventoryId, p.Description
FROM vendor_performance.purchases p
LEFT JOIN vendor_performance.begin_inventory b
  ON p.InventoryId = b.InventoryId AND p.Store = b.Store
WHERE b.InventoryId IS NULL;

#22.  Identify vendors who supplied more than 1 product (based on distinct InventoryId in purchases).
SELECT VendorName, COUNT(DISTINCT InventoryId) AS DistinctProductsSupplied
FROM vendor_performance.purchases
GROUP BY VendorName
HAVING COUNT(DISTINCT InventoryId) > 1;

#23.Show vendor-wise average invoice amount (Dollars) and number of invoices.
SELECT VendorName, COUNT(*) AS InvoiceCount, AVG(Dollars) AS AvgInvoiceValue
FROM vendor_performance.vendor_invoice
GROUP BY VendorName;

#24.For each product, calculate the total quantity purchased and the latest purchase price.
SELECT InventoryId, Description, SUM(Quantity) AS TotalPurchased,
       MAX(PurchasePrice) AS LatestPrice
FROM vendor_performance.purchases
GROUP BY InventoryId, Description; 

#25. List all vendors who received payments more than 15 days after the invoice date.
SELECT VendorName, InvoiceDate, PayDate,
       DATEDIFF(PayDate, InvoiceDate) AS DaysToPay
FROM vendor_performance.vendor_invoice
WHERE DATEDIFF(PayDate, InvoiceDate) > 15;
